esphome:
  name: gate
  friendly_name: Gate

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# ethernet:
  # type: LAN8720
  # mdc_pin: GPIO23
  # mdio_pin: GPIO18
  # clk_mode: GPIO0_IN
  # phy_addr: 1
  # power_pin: GPIO16
  #Optional manual IP
  #manual_ip:
  #  static_ip: $device_ip
  #  gateway: $network_gateway
  #  subnet: $network_subnet
  
# Enable logging
logger:
  # level: DEBUG
  level: VERBOSE
  baud_rate: 0

ota:
  - platform: esphome
    password: "ac395ef9c6e2afde679ef6a945dcbb3e"

# Enable web server (can be disabled)
web_server:
  port: 80

# status_led:
#   pin: 
#     number: ${led_gpio}
#     inverted: true

external_components:
  - source:
      type: git
      url: https://github.com/ngem1/bus_t4
      ref: main
    components: [bus_t4]  # Make sure this matches the folder structure inside components/

wifi:
 ssid: !secret wifi_ssid
 password: !secret wifi_password

 # Enable fallback hotspot (captive portal) in case wifi connection fails
 ap:
   ssid: "Gates Fallback Hotspot"
   password: "iV2EcaCvu3xA"

captive_portal:

# Enable Home Assistant API
api:
  encryption:
    key: "Zlag8s5PhoM1WDCKwMeS9XeuPvyXVZ5uKTPnzoZ6Rks="
  reboot_timeout: 0s # otherwise reboots when disconnected from hassio  
  services:
# to send hex commands to the bus T4
  - service: raw_command
    variables:
        raw_cmd: string
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::send_raw_cmd(raw_cmd);
         
  - service: send_inf_command
    variables:
       to_addr: string
       whose: string
       command: string
       type_command: string
       next_data: string
       data_on: bool
       data_command: string
    then:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd(to_addr, whose, command, type_command, next_data, data_on, data_command);

# closing force
  - service: closing_force
    variables:
      force: string
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::set_mcu("4b", force);         

# opening force
  - service: opening_force
    variables:
      force: string
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::set_mcu("4a", force);

# BlueBus device recognition
  - service: devices_recognition
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::set_mcu("0a","01"); 


# Buttons for sending commands
button:
  - platform: template
    name: Step-by-step
    id: sbs
    on_press:
      lambda: |-
           my_nice_cover -> NiceBusT4::send_cmd(bus_t4::SBS);

#         my_nice_cover -> NiceBusT4::send_raw_cmd("55 0c 00 ff 00 66 01 05 9D 01 82 01 64 E6 0c");

  - platform: template
    name: Pedestrian Gate
    id: p_opn1
    on_press:
      lambda: |-
         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN1);

  - platform: template
    name: Input status
    id: in_stat
    on_press:
      lambda: |-
           my_nice_cover -> NiceBusT4::send_raw_cmd("55.0D.00.03.00.66.08.06.6B.04.D0.99.00.00.4D.0D");
  
  - platform: template
    name: Update values
    id: update_values
    on_press:
      then:
        - component.update: pause_time_text_sensor  # Update text_sensor immedietely
        - component.update: sbs_mode_text_sensor  # Update text_sensor immedietely
        - component.update: motor_speed_open_text_sensor  # Update text_sensor immedietely
        - component.update: max_opn_text_sensor  # Update text_sensor immedietely
        - component.update: pause_time_number  # Update number component immedietely
        - component.update: sbs_mode_select  # Update select component immedietely


  # - platform: template
  #   name: test_check_cmd
  #   id: p_opn12
  #   on_press:
  #     lambda: |-
  #        my_nice_cover -> NiceBusT4::check_cmd();
                      
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::STOP);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::OPEN);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::CLOSE);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN2);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN3);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN4);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN5);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN6);
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLK_OPN);  # Unlock and open 
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::CLS_LOCK);  # Close and Lock 
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLCK_CLS); # Unlock and Close
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::LOCK);      # Lock
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLOCK);    # UnLock
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_SBS);  # Host SBS
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_OPN);  # Host Open
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_CLS);  # Host Close
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_SBS); # Slave SBS
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_OPN); # Slave Open
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_CLS); # Slave Close
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::AUTO_ON);   # Auto-opening active
#         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::AUTO_OFF);  # Auto-opening is inactive



switch:
  - platform: restart
    name: "Nice WT32-ETH01 Restart"

# # disable automatic closing of the gate, if necessary for loading and unloading operations?
# #auto_close & close_ater_photo
#   - platform: template
#     name: "Auto close"
#     id: autoclose_test
#     restore_mode: DISABLED
# #    optimistic: true
#     lambda: |-
#       if (my_nice_cover -> NiceBusT4::autocls_flag) {
#         return true;
#       } else {
#         return false;
#       }
#     turn_on_action:
#       lambda: |-
#         my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "01");
#         my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "a9", "00", true, "01");
#         my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");
#         my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "99", "00", true, "01");                
#     turn_off_action:
#       lambda: |-
#         my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "00");
#         my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "a9", "00", true, "00");
#         my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");
#         my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "99", "00", true, "01");                

  # - platform: gpio
    # name: "Swiatlo brama"
    # pin: ${light_relay_pin}

  - platform: template
    name: "Auto Close" #l1L2 - level 1, option L2
    id: auto_close
    restore_mode: DISABLED
#    optimistic: true
    lambda: |-
      if (my_nice_cover -> NiceBusT4::autocls_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "01");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");              
    turn_off_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "00");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");          

# cover:
cover:
  - platform: bus_t4
    name: "Gate"
    id: my_nice_cover
    device_class: gate
  #  address: 0x0003            # drive address
  #  use_address: 0x0081        # gateway address

#Level 2 settings
#L1 - Pause time
number:
  - platform: template
    name: Pause Time
    id: pause_time_number
    min_value: 0
    max_value: 250
    step: 5
    icon: 'mdi:cog'
    # restore_value: yes
    # initial_value: 30
    # optimistic: true
    # mode: 'slider'
    mode: 'box'
    # lambda: |-
    #   if (id(pause_time_number).has_state()) {
    #     id(pause_time_number).publish_state(my_nice_cover -> NiceBusT4::pause_time);
    #   }

    lambda: |-
      return(my_nice_cover -> NiceBusT4::pause_time);

    # lambda: |-
    #   static char buf[4];
    #   sprintf(buf, "%u", my_nice_cover -> NiceBusT4::pause_time);
    #   return {buf};

    set_action:
    # on_value:  
      then:
        # - delay: 200ms
        - lambda: |-
            //ESP_LOGD("main", "Pause time to set 2 %u (dec)", x);
            int pause_time_to_set = x;
            //ESP_LOGD("main", "Pause time to set %u (dec)", pause_time_to_set);
            char pause_time_hex[3];
            snprintf(pause_time_hex, sizeof(pause_time_hex), "%02X", pause_time_to_set);
            my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "81", "a9", "00", true, pause_time_hex);
            my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "81", "99", "00", true, "01"); 
            ESP_LOGD("main", "Pause time hex %s (hex)", pause_time_hex);
        - delay: 1s  
        - lambda: |-
            id(pause_time_number).publish_state(my_nice_cover -> NiceBusT4::pause_time); //to be sure that value is updated
        - component.update: pause_time_text_sensor  # update text_sensor immedietely      

# SELECT ------------------------------------------------------------------------------------------------------------------
select:
# L2 - step by step mode -----------------------------------------
  - platform: template
    name: Step-by-Step Mode Select
    id: sbs_mode_select
    # optimistic: True
    options:
      - 'Open - Stop - Close - Stop'
      - 'Open - Stop - Close - Open'
      - 'Open - Close - Open - Close'
      - 'Open Only'
    # initial_option: 'Open	-	Stop	-	Close	-	Stop'
    lambda: |-
        std::string new_option;
        switch (my_nice_cover -> NiceBusT4::step_by_step_mode) {
          case 1:
            new_option = "Open - Stop - Close - Stop";
            break;
          case 2:
            new_option = "Open - Stop - Close - Open";
            break;
          case 3:
            new_option = "Open - Close - Open - Close";
            break;
          case 4:
            new_option = "Open Only";
            break;
          default:
            new_option = "unknown";  // Default option if the level is out of range
            //new_option = "Open - Stop - Close - Stop";  // Default option if the level is out of range  
        }
        //id(sbs_mode_select).publish_state(new_option.c_str());
        return new_option;

    # lambda: |-
    #   int mode = my_nice_cover->NiceBusT4::step_by_step_mode;
    #   if (mode >= 1 && mode <= 8) {
    #     return id(sbs_mode_select).at(mode - 1); //.value() If the value of mode is in the range 1-8, then we directly return the appropriate option from the list using get_options().at(mode - 1), since the indices in get_options() start from 0 and our modes start from 1.
    #   } else {
    #     //return("unknown");
    #     //return {};
    #     //return 1;
    #     //return("L7 - Manualny");
    #     std::string new_option;
    #     new_option = "L7 - Manualny";
    #     return new_option;
    #   }

    set_action: 
      then:
        # - logger.log: "wybrano opcję"
        - logger.log: 
            format: "wybrano opcję %s"
            args: [ "x.c_str()" ]
        # - lambda: |-
        #     std::string sbs_mode_variable;
        #     if (x == "L1 - Otwiera - stop - zamyka - stop") {
        #       sbs_mode_variable = "1";
        #     } else if (x == "L2 - Otwiera - stop - zamyka - otwiera") {
        #       sbs_mode_variable = "2";
        #     } else if (x == "L3 - Otwiera - zamyka - otwiera - zamyka") {
        #       sbs_mode_variable = '3';
        #       // ESP_LOGD("debug", "Wybrano opcję L3");
        #     } else if (x == "L4 - Zespół mieszkalny") {
        #       sbs_mode_variable = "4";
        #     }
        #     // ESP_LOGD("debug", "sbs_mode_variable: %s", sbs_mode_variable);
        #     // ESP_LOGD("debug", "sbs_mode_variable: %s", sbs_mode_variable.c_str());
        #     my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "61", "a9", "00", true, sbs_mode_variable.c_str());
        #     my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "61", "99", "00", true, "01");
        - lambda: |-
            auto index_optional = id(sbs_mode_select).index_of(x.c_str());
            int index = index_optional.value_or(0) + 1; //Conversion from optional to int. Indexes are numbered from 0, so we add 1 to get the correct mode number (1 to 8).
            char sbs_mode_variable[2];
            snprintf(sbs_mode_variable, sizeof(sbs_mode_variable), "%d", index);
            my_nice_cover->NiceBusT4::send_inf_cmd("0003", "04", "61", "a9", "00", true, sbs_mode_variable);
            my_nice_cover->NiceBusT4::send_inf_cmd("0003", "04", "61", "99", "00", true, "01");               
        - delay: 1s  
        # - lambda: |-
            # id(sbs_mode_select).publish_state(my_nice_cover -> NiceBusT4::step_by_step_mode); //to be sure that value is updated
        - component.update: sbs_mode_text_sensor  # update text_sensor immedietely

# L3 - open speed  -----------------------------------------
  - platform: template
    name: Speed Select
    id: speed_open_select
    # optimistic: True
    options:
      - 'Slow'
      - 'Fast'
      # - 'L3 - Medium'
      # - 'L4 - Fast'
      # - 'L5 - Very fast'
      # - 'L6 - Estremely fast'
      # - 'L7 - Opens “Fast”, Closes “Slow”'
      # - 'L8 - Opens “Extremely fast”, Closes “Fast”'
      - 'other'
    lambda: |- 
        // auto motor_speed_open = my_nice_cover -> NiceBusT4::motor_speed_open;
        std::string new_option;
        switch (my_nice_cover -> NiceBusT4::motor_speed_open) {
          case 03: //w DEC
            new_option = id(speed_open_select).at(0).value_or("other");
            break;
          case 06:
            new_option = id(speed_open_select).at(1).value_or("other");
            break;
          default:
            new_option = "other";  // Default option if the level is out of range
        }
        //id(speed_open_select).publish_state(new_option.c_str());
        //ESP_LOGD("debug", "new_option = : %s", new_option.c_str());
        return new_option;

    set_action: 
      then:
        - logger.log: 
            format: "chosen option %s"
            args: [ "x.c_str()" ]
        - logger.log: 
            format: "Selected index: %d"
            args: [ "(id(speed_open_select).index_of(x.c_str()).value_or(0))" ]

        - lambda: |-
            if (x != "other") {
              int open_speed_variable;
              switch ((id(speed_open_select).index_of(x.c_str())).value_or(0)) {
                case 0:
                  open_speed_variable = 03;
                  break;
                case 1:
                  open_speed_variable = 06;
                  break;
              }
              char open_speed_variable_hex[2];
              sprintf(open_speed_variable_hex, "%X", open_speed_variable);
              //ESP_LOGD("debug", "open_speed_variable: %d", open_speed_variable);
              //ESP_LOGD("debug", "((id(speed_open_select).index_of(x.c_str())).value_or(0)): %d", ((id(speed_open_select).index_of(x.c_str())).value_or(0)));
              //ESP_LOGD("debug", "(id(speed_open_select).index_of(x.c_str())): %d", (id(speed_open_select).index_of(x.c_str())));
              //ESP_LOGD("debug", "open_speed_variable_dec: %d", open_speed_variable);
              my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "42", "a9", "00", true, open_speed_variable_hex);
              my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "42", "99", "00", true, "01");
            }
        # - lambda: |-
        #     auto index_optional = id(sbs_mode_select).index_of(x.c_str());
        #     int index = index_optional.value_or(0) + 1; //Conversion from optional to int. Indexes are numbered from 0, so we add 1 to get the correct mode number (1 to 8).
        #     char sbs_mode_variable[2];
        #     snprintf(sbs_mode_variable, sizeof(sbs_mode_variable), "%d", index);
        #     my_nice_cover->NiceBusT4::send_inf_cmd("0003", "04", "61", "a9", "00", true, sbs_mode_variable);
        #     my_nice_cover->NiceBusT4::send_inf_cmd("0003", "04", "61", "99", "00", true, "01");     

        - delay: 1s  
        # - lambda: |-
            # id(sbs_mode_select).publish_state(my_nice_cover -> NiceBusT4::step_by_step_mode); //to be sure that value is updated
        - component.update: motor_speed_open_text_sensor  # update text_sensor immedietely


# For information purposes - just to be sure of setting values
text_sensor:
  - platform: template
    name: "Pause Time"
    id: pause_time_text_sensor
    # restore_mode: DISABLED
    lambda: |-
      static char buf[4];
      sprintf(buf, "%u", my_nice_cover -> NiceBusT4::pause_time);
      return {buf};
    # update_interval: 1s
    # on_value:
    #   then:
    #     - lambda: |-
    #         if (id(nice_bus_t4) != nullptr) {
    #           id(nice_bus_t4)->pause_time_sensor = id(pause_time_sensor);  // Bez użycia & i castowania
    #           ESP_LOGD("debug", "pause_time_sensor przypisany: %p", id(nice_bus_t4)->pause_time_sensor);
    #         }
    # on_value:
    #   then:
    #     lambda: |-
    #       static char buf[4];
    #       sprintf(buf, "%u", my_nice_cover -> NiceBusT4::pause_time);
    #       return {buf};

  - platform: template
    name: "Step-by-Step Mode"
    id: sbs_mode_text_sensor
    lambda: |-
      static char buf[6];
      sprintf(buf, "%u", my_nice_cover -> NiceBusT4::step_by_step_mode);
      return {buf};

  - platform: template
    name: "Motor speed"
    id: motor_speed_open_text_sensor
    lambda: |-
      static char buf[4];
      sprintf(buf, "%u", my_nice_cover -> NiceBusT4::motor_speed_open);
      return {buf};

  - platform: template
    name: "Max Open"
    id: max_opn_text_sensor
    lambda: |-
      static char buf[6];
      sprintf(buf, "%u", my_nice_cover -> NiceBusT4::max_encoder_position);
      return {buf};        

  - platform: template
    name: "Number of Cycles"
    id: number_of_cycles_text_sensor
    lambda: |-
      static char buf[6];
      sprintf(buf, "%u", my_nice_cover -> NiceBusT4::p_count);
      return {buf};  
